{% extends 'base.html.twig' %}

{% block title %}Shogi{% endblock %}

{% block javascripts %}
    {{ parent() }}

{% endblock %}

{% block body %}
    <style>
        .example-wrapper {
            margin: 1em auto;
            max-width: 800px;
            width: 95%;
            font: 18px/1.5 sans-serif;
        }

        .example-wrapper code {
            background: #F5F5F5;
            padding: 2px 6px;
        }

        .red {
            color: #b0413e;
        }

        .possible {
            color: blue;
        }

        .eatable {
            color: darkred !important;
        }

        .cell {
            text-align: center;
            cursor: pointer;
            min-width: 20px;
            min-height: 20px;
            border: 1px solid gainsboro;
            margin: auto;
        }

        .cell:hover {
            color: orange;
        }

        .white {
            color: #00B8F5;
        }

        .black {
            color: #000;
            font-weight: bold;
        }

        .hide {
            display: none;
        }

    </style>

    <div class="example-wrapper">
        <!--<h1>Game Shogi âœ…</h1>-->

        <div class="row">
            <div class="col-6">
                <div class="row">
                    <div class="col-12">
                        <div id="main_board">
                            {{ board | raw }}
                        </div>

                    </div>
                </div>
                <hr>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <button class="form-control succes" id="promote_piece">
                                <span class="spinner-border spinner-border-sm is-fetching" role="status"
                                      aria-hidden="true"></span>
                                Promote Piece
                            </button>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <button class="form-control succes" id="reset_board">
                                <span class="spinner-border spinner-border-sm is-fetching" role="status"
                                      aria-hidden="true"></span>
                                Reset Board
                            </button>
                        </div>
                    </div>
                </div>
                <hr>
                <div class="row hide">
                    <div class="col-12">
                        <div class="form-group">
                            <label>Piece</label>
                            <input class="form-control" id="piece_id" disabled>
                        </div>
                        <div class="form-group">
                            <label>Row To</label>
                            <input class="form-control" id="row_to" disabled>
                        </div>
                        <div class="form-group">
                            <label>Col To</label>
                            <input class="form-control" id="col_to" disabled>
                        </div>
                        <div id="alert_datos" class="alert  alert-warning alert-dismissible fade show">
                            <strong>Completar movimiento!</strong> Por Favor seleccione pieza y destino.
                        </div>
                        <div class="form-group">
                            <button class="form-control succes" id="make_move">
                                <span class="spinner-border spinner-border-sm is-fetching" role="status"
                                      aria-hidden="true"></span>
                                Make Move
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    <script>

        (function () {


            document.getElementById('alert_datos').style.display = 'none';
            isFetching(false);

            const make_move = document.getElementById('make_move');
            const reset_board = document.getElementById('reset_board');

            reset_board.addEventListener('click', function () {
                resetBoard();
                getMainBoard();
            });


            function getMainBoard() {
                var httpRequest = new XMLHttpRequest()
                httpRequest.onreadystatechange = function (data) {
                    if (httpRequest.readyState === 4) {
                        const resultObject = JSON.parse(httpRequest.response);
                        const main_board = document.getElementById('main_board');
                        main_board.innerHTML = resultObject.board;
                        clickCell();
                    }
                };
                httpRequest.open('POST', '{{ path('get_main_board') }}')
                httpRequest.send();
            }


            function resetBoard() {
                isFetching(true);
                reset_board.disabled = true;
                var httpRequest = new XMLHttpRequest()
                httpRequest.onreadystatechange = function (data) {
                    if (httpRequest.readyState === 4) {
                        //const resultObject = JSON.parse(httpRequest.response);
                        isFetching(false);
                        reset_board.disabled = false;
                    }
                };
                httpRequest.open('POST', '{{ path('clear_bds') }}')
                httpRequest.send();
            }

            function makeMove(id_piece, row_to, col_to) {

                var httpRequest = new XMLHttpRequest()
                httpRequest.onreadystatechange = function (data) {
                    if (httpRequest.readyState === 4) {

                        //const resultObject = JSON.parse(httpRequest.response);
                        getMainBoard();
                    }
                };
                httpRequest.open('POST', '{{ path('make_move') }}')
                httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')
                httpRequest.send('id_piece=' + id_piece + '&row_to=' + row_to + '&col_to=' + col_to)
            }


            function sendMove(id_piece) {
                var httpRequest = new XMLHttpRequest()
                httpRequest.onreadystatechange = function (data) {
                    if (httpRequest.readyState === 4) {

                        clearBoard("move_to_table");

                        const resultObject = JSON.parse(httpRequest.response);
                        const possibleMovesClear = resultObject.possibleMovesArray.clear;
                        const possibleMovesEat = resultObject.possibleMovesArray.eat;


                        for (let key in possibleMovesClear) {
                            let obj = possibleMovesClear[key];
                            let id = "" + obj[0] + obj[1];
                            document.getElementById(id).classList.add("possible");
                        }

                        for (let key in possibleMovesEat) {
                            let obj = possibleMovesEat[key];
                            let id = "" + obj[0] + obj[1];
                            document.getElementById(id).classList.add("eatable");
                        }

                    }
                };

                httpRequest.open('POST', '{{ path('move_piece') }}')
                httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')
                httpRequest.send('id_piece=' + id_piece)
            }

            function clearBoard(table) {
                var row = document.getElementById('move_to_table').rows;
                var y;
                for (var i = 0; i < row.length; i++) {
                    for (var j = 0; j < row[i].cells.length; j++) {
                        y = row[i].cells;
                        y[j].classList.remove('possible', 'eatable');
                    }
                }
            }


            clickCell();

            function clickCell() {
                var row = document.getElementById('move_to_table').rows;
                for (var i = 0; i < row.length; i++) {
                    for (var j = 0; j < row[i].cells.length; j++) {
                        //console.log(row[i].cells[j].innerHTML);
                        row[i].cells[j].addEventListener('click', function (e) {
                            let row = this.getAttribute("data-row");
                            let col = this.getAttribute("data-col");
                            let id_piece = this.getAttribute("data-piece");
                            setRowCol(row, col, id_piece,);
                        })
                    }
                }
            }

            function setRowCol(row, col, id_piece) {
                if (id_piece != "") {
                    document.getElementById('piece_id').value = id_piece;
                    document.getElementById('alert_datos').style.display = 'none';
                    make_move.disabled = true;
                    sendMove(id_piece);
                    make_move.disabled = false;
                } else {
                    let id_celda = row + col;
                    let celda = document.getElementById(id_celda);
                    if (celda.classList.contains('possible')) {
                        document.getElementById('row_to').value = row;
                        document.getElementById('col_to').value = col;
                        let id_piece = document.getElementById('piece_id').value;
                        let row_to = document.getElementById('row_to').value;
                        let col_to = document.getElementById('col_to').value;

                        console.log(checkIfPromotable(id_piece, row_to, col_to, 'black'));

                        make_move.disabled = true;
                        makeMove(id_piece, row_to, col_to);
                        make_move.disabled = false;

                    } else {
                        alert("No es una posiciÃ³n vÃ¡lida para mover");
                    }
                }
            }

            function isFetching(bool) {
                var els = document.getElementsByClassName('is-fetching');
                Array.prototype.forEach.call(els, function (el) {
                    bool == true ? el.style.opacity = "1" : el.style.opacity = "0";
                });
            }


            function checkIfPromotable(piece, row, col, color) {
                let promotionAreaArray = promotionArea(color);

                console.log([parseInt(row), parseInt(col)]);
                console.log(promotionAreaArray.indexOf([parseInt(row), parseInt(col)]));

                if (promotionAreaArray.includes([parseInt(row), parseInt(col)])) {
                    return "Si"
                } else {
                    return "No"
                }

            }


            function promotionArea(color) {
                var arrayPromotionArea = null;
                var allElements = [];

                for (let i = 0; i < 9; i++) {
                    for (let j = 0; j < 9; j++) {
                        allElements.push([i, j])
                    }
                }
                switch (color) {
                    case 'white':
                        arrayPromotionArea = allElements.slice(54, 81);
                        break;
                    case 'black':
                        arrayPromotionArea = allElements.slice(0, 27);
                        break;
                    default:
                        arrayPromotionArea = [];
                        break;
                }

                return arrayPromotionArea;
            }


            function promotePiece() {
                swal({
                    title: "You can promote the piece",
                    text: "Â¿Do you want to do it?",
                    icon: "info",
                    buttons: true,
                    dangerMode: true,
                })
                    .then((willPromote) => {

                        if (willPromote) {

                        } else {

                        }
                    });
            }


        })();


    </script>

{% endblock %}
