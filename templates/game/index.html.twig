{% extends 'base.html.twig' %}

{% block title %}Shogi{% endblock %}

{% block javascripts %}
    {{ parent() }}

{% endblock %}

{% block body %}
    <style>

        .container {
            background: aliceblue;
        }

        .red {
            color: #b0413e;
        }

        .possible {
            background: #4f805d;
        }

        .eatable {
            background: #b0413e;
        }

        tbody {
            background-color: #FFC049;
        }

        table, th, td {

            border: 1px solid black;
            border-collapse: collapse;
            cursor: pointer;
        }

        table {
            table-layout: fixed;
            width: 100%;
        }

        tr {
            height: 3vw; /* Set this to whatever amount forms square cells */
        }

        .cell:hover {
            /*color: orange;*/
            /* background: orange;*/
            font-weight: bold;
            font-size: larger;
        }

        .white {
            color: white;
            font-weight: bold;
        }

        .black {
            color: #000;
            font-weight: bold;
        }

        .hide {
            display: none;
        }

        #black_eaten {
            display: flex;
            flex-direction: row;
        }

        #white_eaten {
            display: flex;
            flex-direction: row;
        }

        .white-eaten-piece {
            background: white;
            color: black;
        }

        .black-eaten-piece {
            background: black;
            color: white;
        }

        .active {
            background: rebeccapurple;
        }

        .eaten {
            margin: 10px;
            height: 30px;
            width: 30px;
            border: 1px solid #4e555b;
        }

        .jaque {
            background: deeppink !important;
        }

        .atack {
            background: lawngreen !important;
        }

        .risk {
            color: #ee2d4d;
        }

        .free-move {
            background-color: #494f54;
        }

        .under-atack {
            background-color: #ee2d4d;
        }

    </style>

    <div class="example-wrapper">
        <div class="row">
            <div class="col-12 text-center">
                <h1> Shogi </h1>
            </div>
        </div>
        <hr>

        <div class="row">
            <div class="col-12 text-center">
                <div class="row">

                    <div class="col-6">
                        <div id="board_container">
                            <div id="black_eaten">
                                {{ eatenPieces.black | raw }}
                            </div>
                            <div id="main_board">
                                {{ board | raw }}
                            </div>
                            <div id="white_eaten">
                                {{ eatenPieces.white | raw }}
                            </div>
                        </div>
                    </div>
                    <div class="col-6 information">
                        <div class="card" style="width: 18rem;">
                            <div class="card-body">
                                <h5 class="card-title">Game Information</h5>
                                <p class="card-text game-information"></p>

                            </div>
                        </div>

                    </div>
                </div>
                <hr>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <button class="form-control succes" id="reset_board">
                                <span class="spinner-border spinner-border-sm is-fetching" role="status"
                                      aria-hidden="true"></span>
                                Reset Board
                            </button>
                        </div>
                    </div>
{#                    <div class="col-md-6">#}
{#                        <div class="form-group">#}
{#                            <button class="form-control succes" id="promote_piece">#}
{#                                <span class="spinner-border spinner-border-sm is-fetching" role="status"#}
{#                                      aria-hidden="true"></span>#}
{#                                Promote Piece#}
{#                            </button>#}
{#                        </div>#}
{#                    </div>#}
                </div>
                <hr>
                <div class="row hide">
                    <div class="col-12">
                        <div class="form-group">
                            <input class="form-control" id="piece_id" disabled>
                        </div>
                        <div class="form-group">
                            <input class="form-control" id="row_to" disabled>
                        </div>
                        <div class="form-group">
                            <input class="form-control" id="col_to" disabled>
                        </div>
                        <div class="form-group">
                            <input class="form-control" id="add_piece_flag" value="0" disabled>
                        </div>
                        <div class="form-group">
                            <input class="form-control" id="jaque" value="0" disabled>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    <script>

        (function () {

            const reset_board = document.getElementById('reset_board');

            isFetching(false);
            eatenClicks()
            clickCell();


            reset_board.addEventListener('click', function () {
                resetBoardDbs();
                const whiteEatenDiv = document.getElementById('white_eaten');
                whiteEatenDiv.innerHTML = "";
                const blackEatenDiv = document.getElementById('black_eaten');
                blackEatenDiv.innerHTML = "";
            });


            function addPieceback(row_to, col_to) {
                let id_piece = getSelectedAddPieceDiv();

                var httpRequest = new XMLHttpRequest()
                httpRequest.onreadystatechange = function (data) {
                    if (httpRequest.readyState === 4) {
                        const addFlag = document.getElementById('add_piece_flag');
                        addFlag.value = 0;
                        getMainBoard();
                    }
                };

                httpRequest.open('POST', '{{ path('add_piece_back') }}')
                httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')
                httpRequest.send('id_piece=' + id_piece + '&row_to=' + row_to + '&col_to=' + col_to)
            }

            function getSelectedAddPieceDiv() {
                var lists = document.querySelectorAll(".eaten");
                let piece_id = "";

                for (let el of lists) {
                    if (el.classList.contains('active')) {
                        piece_id = el.id;
                        break
                    }
                }

                return piece_id;
            }


            function eatenClicks() {
                var boardContainer = document.getElementById("board_container");

                doSomething = function (event) {
                    if (event.target.classList.contains('eaten')) {
                        const addFlag = document.getElementById('add_piece_flag');
                        let flagValue = addFlag.value;

                        if (flagValue == 0) {
                            event.target.classList.add('active');
                            addFlag.value = 1
                        } else {
                            event.target.classList.remove('active');
                            addFlag.value = 0
                        }
                    }
                };
                boardContainer.addEventListener("click", doSomething, false);
            }

            function getMainBoard() {
                var httpRequest = new XMLHttpRequest()
                httpRequest.onreadystatechange = function () {
                    if (httpRequest.readyState === 4) {
                        const resultObject = JSON.parse(httpRequest.response);
                        const main_board = document.getElementById('main_board');
                        main_board.innerHTML = resultObject.board;
                        clickCell();
                        getEatablePieces();
                    }
                };
                httpRequest.open('POST', '{{ path('get_main_board') }}')
                httpRequest.send();
            }


            function resetBoardDbs() {
                isFetching(true);
                reset_board.disabled = true;
                var httpRequest = new XMLHttpRequest()
                httpRequest.onreadystatechange = function () {
                    if (httpRequest.readyState === 4) {
                        document.getElementById('jaque').value = "0";
                        isFetching(false);
                        getMainBoard();
                        reset_board.disabled = false;
                    }
                };
                httpRequest.open('POST', '{{ path('clear_bds') }}')
                httpRequest.send();
            }

            function makeMove(id_piece, row_to, col_to, eatable) {
                var httpRequest = new XMLHttpRequest()
                httpRequest.onreadystatechange = function (data) {
                    if (httpRequest.readyState === 4) {
                        getMainBoard();
                    }
                };
                httpRequest.open('POST', '{{ path('make_move') }}')
                httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')
                httpRequest.send('id_piece=' + id_piece + '&row_to=' + row_to + '&col_to=' + col_to + '&eatable=' + eatable)
            }


            function getEatablePieces() {

                var httpRequest = new XMLHttpRequest()
                httpRequest.onreadystatechange = function (data) {
                    if (httpRequest.readyState === 4) {
                        const resultObject = JSON.parse(httpRequest.response);
                        let whiteEaten = resultObject.white;
                        let blackEaten = resultObject.black;

                        const whiteEatenDiv = document.getElementById('white_eaten');
                        whiteEatenDiv.innerHTML = whiteEaten;
                        const blackEatenDiv = document.getElementById('black_eaten');
                        blackEatenDiv.innerHTML = blackEaten;
                    }
                };
                httpRequest.open('POST', '{{ path('get_eaten_pieces') }}')
                httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')
                httpRequest.send('');

            }

            function checkJaque(id_piece) {
                var httpRequest = new XMLHttpRequest();
                httpRequest.onreadystatechange = function (data) {
                    if (httpRequest.readyState === 4) {
                        const resultObject = JSON.parse(httpRequest.response);
                        const jaqueCoordinates = resultObject.jaqueCoordinates;
                        if (jaqueCoordinates.length > 0) {
                            let id = "" + jaqueCoordinates[0] + jaqueCoordinates[1];
                            document.getElementById(id).classList.add("jaque");
                            document.getElementById('jaque').value = "1";
                            document.getElementsByClassName('game-information')[0].innerHTML = "<label>Jaque</label>";
                        } else {
                            document.getElementById('jaque').value = "0";
                        }
                    }
                };

                httpRequest.open('POST', '{{ path('check_jaque') }}')
                httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')
                httpRequest.send('id_piece=' + id_piece)
            }


            function sendMove(id_piece) {
                const jaque = document.getElementById('jaque').value

                if (jaque != '1' || true) {

                    var httpRequest = new XMLHttpRequest();
                    httpRequest.onreadystatechange = function (data) {
                        if (httpRequest.readyState === 4) {

                            clearBoard("move_to_table");
                            const resultObject = JSON.parse(httpRequest.response);
                            const possibleMovesClear = resultObject.possibleMovesArray.clear;
                            const possibleMovesEat = resultObject.possibleMovesArray.eat;
                            const jaqueCoordinates = resultObject.jaqueCoordinates;
                            const allEnemyPossibleAtacks = resultObject.AllEnemyPossibleAtacks;
                            const validMove = resultObject.validMove;

                            if (validMove) {
                                for (let key in possibleMovesClear) {
                                    let obj = possibleMovesClear[key];
                                    let id = "" + obj[0] + obj[1];
                                    document.getElementById(id).classList.add("possible");
                                }

                                for (let key in possibleMovesEat) {
                                    let obj = possibleMovesEat[key];
                                    let id = "" + obj[0] + obj[1];
                                    document.getElementById(id).classList.add("eatable");
                                }

                                for (let key in allEnemyPossibleAtacks) {
                                    let obj = allEnemyPossibleAtacks[key];
                                    let id = "" + obj['coord'][0] + obj['coord'][1];
                                    let pieza = document.querySelectorAll("[data-piece='" + obj['piece_id'] + "']")[0];
                                    document.getElementById(id).classList.add("risk");
                                }

                                if (jaqueCoordinates.length > 0) {
                                    let id = "" + jaqueCoordinates[0] + jaqueCoordinates[1];
                                    document.getElementsByClassName('game-information')[0].innerHTML = "<label>Jaque</label>";
                                    document.getElementById(id).classList.add("jaque");
                                }

                            } else {
                                swal("It's other team turn!", "", "warning");
                            }
                        }
                    };

                    httpRequest.open('POST', '{{ path('move_piece') }}')
                    httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')
                    httpRequest.send('id_piece=' + id_piece)
                } else {
                    swal("Jaque", "", "warning");
                }


            }

            function clearBoard(table, jaqueCoords = null) {
                var row = document.getElementById('move_to_table').rows;
                document.getElementsByClassName('game-information')[0].innerHTML = "";
                var y;
                for (var i = 0; i < row.length; i++) {
                    for (var j = 0; j < row[i].cells.length; j++) {
                        y = row[i].cells;
                        y[j].classList.remove('possible', 'eatable', 'jaque', 'risk');
                    }
                }

                if (jaqueCoords != null) {

                }

            }


            function setRowCol(row, col, id_piece, eatable) {

                if (id_piece != "" && !eatable) {
                    document.getElementById('piece_id').value = id_piece;
                    sendMove(id_piece);

                } else {
                    let id_celda = row + col;
                    let celda = document.getElementById(id_celda);

                    if (celda.classList.contains('possible') || celda.classList.contains('eatable')) {
                        document.getElementById('row_to').value = row;
                        document.getElementById('col_to').value = col;
                        let id_piece = document.getElementById('piece_id').value;
                        let row_to = document.getElementById('row_to').value;
                        let col_to = document.getElementById('col_to').value;
                        let pieza = document.querySelectorAll("[data-piece='" + id_piece + "']")[0];

                        let promoted = pieza.classList.contains("promoted") ? '1' : '0';
                        let color = pieza.classList.contains("white") ? 'white' : 'black';
                        promoted == 0 ? checkIfPromotable(id_piece, row_to, col_to, color) : "";

                        makeMove(id_piece, row_to, col_to, eatable);
                    }
                }
            }


            function isFetching(bool) {
                var els = document.getElementsByClassName('is-fetching');
                Array.prototype.forEach.call(els, function (el) {
                    bool == true ? el.style.opacity = "1" : el.style.opacity = "0";
                });
            }

            function checkIfPromotable(id_piece, row, col, color) {
                let promotionAreaArray = promotionArea(color);
                if (checkIfExistCoordinate(promotionAreaArray, parseInt(row), parseInt(col))) {
                    askIfPromotePiece(id_piece);
                }
            }


            function checkIfExistCoordinate(promotionAreaArray, row, col) {
                for (var i = 0, len = promotionAreaArray.length; i < len; i++) {
                    if (promotionAreaArray[i][0] == row && promotionAreaArray[i][1] == col) {
                        return true;
                        break;
                    }
                }
                return false;
            }

            function promotionArea(color) {
                var arrayPromotionArea = null;
                var allElements = [];

                for (let i = 0; i < 9; i++) {
                    for (let j = 0; j < 9; j++) {
                        allElements.push([i, j])
                    }
                }
                switch (color) {
                    case 'white':
                        arrayPromotionArea = allElements.slice(54, 81);
                        break;
                    case 'black':
                        arrayPromotionArea = allElements.slice(0, 27);
                        break;
                    default:
                        arrayPromotionArea = [];
                        break;
                }
                return arrayPromotionArea;
            }


            function askIfPromotePiece(id_piece) {
                swal({
                    title: "You can promote the piece",
                    text: "¿Do you want to do it?",
                    icon: "info",
                    buttons: true,
                    dangerMode: true,
                })
                    .then((willPromote) => {
                        if (willPromote) {
                            promotePiece(id_piece);
                        }
                    });
            }


            function promotePiece(id_piece) {
                var httpRequest = new XMLHttpRequest()
                httpRequest.onreadystatechange = function (data) {
                    if (httpRequest.readyState === 4) {
                        const resultObject = JSON.parse(httpRequest.response);
                        getMainBoard();
                    }
                };

                httpRequest.open('POST', '{{ path('promote_piece') }}')
                httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')
                httpRequest.send('id_piece=' + id_piece)
            }


            function clickCell() {
                var row = document.getElementById('move_to_table').rows;
                for (var i = 0; i < row.length; i++) {
                    for (var j = 0; j < row[i].cells.length; j++) {
                        //console.log(row[i].cells[j].innerHTML);
                        row[i].cells[j].addEventListener('click', function (e) {
                            let row = this.getAttribute("data-row");
                            let col = this.getAttribute("data-col");
                            let id_piece = this.getAttribute("data-piece");
                            let eatable = this.classList.contains('eatable');
                            const addFlag = document.getElementById('add_piece_flag');
                            let addPieceFlagValue = addFlag.value;

                            if (addPieceFlagValue == 1) {
                                addPieceback(row, col)
                            } else {
                                setRowCol(row, col, id_piece, eatable);
                            }

                        })
                    }
                }
            }


        })();
    </script>

{% endblock %}
